from environs import Env
from utilities.api_helpers.api import API


sut_env = Env()
AGENCY: str = sut_env.str('AGENCY')


class GroupsAPI(API):
    """API methods for groups."""

    API: API = API()
    URL: str = API.build_api_url(path=f'/ondemand/{AGENCY}/groups')

    def create_group(self, group_data: dict) -> dict:
        """Add a group using the API, then surface the group ID for teardown.

        :param group_data: A dictionary of group data for API consumption.
        """
        return self.API.create_request(data=group_data, expected_response=[200], url=self.URL)

    def delete_group(self, group: dict) -> None:
        """Delete a group which has been successfully created.

        :param group: A group generated by a factory.
        """
        group_id: str = group['group_id']
        delete_url: str = f'{self.URL}/{group_id}'

        self.API.delete_request(expected_response=[200], url=delete_url)

    def add_user_to_group(self, group: dict, user: dict) -> dict:
        """Associate a user with a group.

        Note- both group and user must already exist for association to take place.

        :param group: A group generated by a factory.
        :param user: A user generated by a factory.
        """
        group_id: int = group['group_id']
        username: str = user['username']
        url: str = f'{self.URL}/{group_id}/users/{username}'

        return self.API.create_request(data=dict(), expected_response=[200], url=url)

    def remove_user_from_group(self, group: dict, user: dict) -> None:
        """Disassociate a user with a group.

        :param group: A group generated by a factory.
        :param user: A user generated by a factory.
        """
        group_id: int = group['group_id']
        username: str = user['username']
        url: str = f'{self.URL}/{group_id}/users/{username}'

        self.API.delete_request(expected_response=[200], url=url)
